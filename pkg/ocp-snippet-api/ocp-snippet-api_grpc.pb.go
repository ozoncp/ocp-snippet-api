// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_snippet_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpSnippetApiClient is the client API for OcpSnippetApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpSnippetApiClient interface {
	//  Создаёт новый фрагмент решения
	CreateSnippetV1(ctx context.Context, in *CreateSnippetV1Request, opts ...grpc.CallOption) (*CreateSnippetV1Response, error)
	//  Создаёт несколько новых фрагментов решения
	MultiCreateSnippetV1(ctx context.Context, in *MultiCreateSnippetV1Request, opts ...grpc.CallOption) (*MultiCreateSnippetV1Response, error)
	// Возвращает фрагмент решения
	DescribeSnippetV1(ctx context.Context, in *DescribeSnippetV1Request, opts ...grpc.CallOption) (*DescribeSnippetV1Response, error)
	// Возвращает список фрагментов решения
	ListSnippetsV1(ctx context.Context, in *ListSnippetsV1Request, opts ...grpc.CallOption) (*ListSnippetsV1Response, error)
	//  Обнавляет фрагмент решения по его Id
	UpdateSnippetV1(ctx context.Context, in *UpdateSnippetV1Request, opts ...grpc.CallOption) (*UpdateSnippetV1Response, error)
	// Удаляет фрагмент решения
	RemoveSnippetV1(ctx context.Context, in *RemoveSnippetV1Request, opts ...grpc.CallOption) (*RemoveSnippetV1Response, error)
}

type ocpSnippetApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpSnippetApiClient(cc grpc.ClientConnInterface) OcpSnippetApiClient {
	return &ocpSnippetApiClient{cc}
}

func (c *ocpSnippetApiClient) CreateSnippetV1(ctx context.Context, in *CreateSnippetV1Request, opts ...grpc.CallOption) (*CreateSnippetV1Response, error) {
	out := new(CreateSnippetV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/CreateSnippetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSnippetApiClient) MultiCreateSnippetV1(ctx context.Context, in *MultiCreateSnippetV1Request, opts ...grpc.CallOption) (*MultiCreateSnippetV1Response, error) {
	out := new(MultiCreateSnippetV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/MultiCreateSnippetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSnippetApiClient) DescribeSnippetV1(ctx context.Context, in *DescribeSnippetV1Request, opts ...grpc.CallOption) (*DescribeSnippetV1Response, error) {
	out := new(DescribeSnippetV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/DescribeSnippetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSnippetApiClient) ListSnippetsV1(ctx context.Context, in *ListSnippetsV1Request, opts ...grpc.CallOption) (*ListSnippetsV1Response, error) {
	out := new(ListSnippetsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/ListSnippetsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSnippetApiClient) UpdateSnippetV1(ctx context.Context, in *UpdateSnippetV1Request, opts ...grpc.CallOption) (*UpdateSnippetV1Response, error) {
	out := new(UpdateSnippetV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/UpdateSnippetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSnippetApiClient) RemoveSnippetV1(ctx context.Context, in *RemoveSnippetV1Request, opts ...grpc.CallOption) (*RemoveSnippetV1Response, error) {
	out := new(RemoveSnippetV1Response)
	err := c.cc.Invoke(ctx, "/ocp.snippet.api.OcpSnippetApi/RemoveSnippetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpSnippetApiServer is the server API for OcpSnippetApi service.
// All implementations must embed UnimplementedOcpSnippetApiServer
// for forward compatibility
type OcpSnippetApiServer interface {
	//  Создаёт новый фрагмент решения
	CreateSnippetV1(context.Context, *CreateSnippetV1Request) (*CreateSnippetV1Response, error)
	//  Создаёт несколько новых фрагментов решения
	MultiCreateSnippetV1(context.Context, *MultiCreateSnippetV1Request) (*MultiCreateSnippetV1Response, error)
	// Возвращает фрагмент решения
	DescribeSnippetV1(context.Context, *DescribeSnippetV1Request) (*DescribeSnippetV1Response, error)
	// Возвращает список фрагментов решения
	ListSnippetsV1(context.Context, *ListSnippetsV1Request) (*ListSnippetsV1Response, error)
	//  Обнавляет фрагмент решения по его Id
	UpdateSnippetV1(context.Context, *UpdateSnippetV1Request) (*UpdateSnippetV1Response, error)
	// Удаляет фрагмент решения
	RemoveSnippetV1(context.Context, *RemoveSnippetV1Request) (*RemoveSnippetV1Response, error)
	mustEmbedUnimplementedOcpSnippetApiServer()
}

// UnimplementedOcpSnippetApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpSnippetApiServer struct {
}

func (UnimplementedOcpSnippetApiServer) CreateSnippetV1(context.Context, *CreateSnippetV1Request) (*CreateSnippetV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnippetV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) MultiCreateSnippetV1(context.Context, *MultiCreateSnippetV1Request) (*MultiCreateSnippetV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateSnippetV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) DescribeSnippetV1(context.Context, *DescribeSnippetV1Request) (*DescribeSnippetV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSnippetV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) ListSnippetsV1(context.Context, *ListSnippetsV1Request) (*ListSnippetsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnippetsV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) UpdateSnippetV1(context.Context, *UpdateSnippetV1Request) (*UpdateSnippetV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSnippetV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) RemoveSnippetV1(context.Context, *RemoveSnippetV1Request) (*RemoveSnippetV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSnippetV1 not implemented")
}
func (UnimplementedOcpSnippetApiServer) mustEmbedUnimplementedOcpSnippetApiServer() {}

// UnsafeOcpSnippetApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpSnippetApiServer will
// result in compilation errors.
type UnsafeOcpSnippetApiServer interface {
	mustEmbedUnimplementedOcpSnippetApiServer()
}

func RegisterOcpSnippetApiServer(s grpc.ServiceRegistrar, srv OcpSnippetApiServer) {
	s.RegisterService(&OcpSnippetApi_ServiceDesc, srv)
}

func _OcpSnippetApi_CreateSnippetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnippetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).CreateSnippetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/CreateSnippetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).CreateSnippetV1(ctx, req.(*CreateSnippetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSnippetApi_MultiCreateSnippetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateSnippetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).MultiCreateSnippetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/MultiCreateSnippetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).MultiCreateSnippetV1(ctx, req.(*MultiCreateSnippetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSnippetApi_DescribeSnippetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSnippetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).DescribeSnippetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/DescribeSnippetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).DescribeSnippetV1(ctx, req.(*DescribeSnippetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSnippetApi_ListSnippetsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnippetsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).ListSnippetsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/ListSnippetsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).ListSnippetsV1(ctx, req.(*ListSnippetsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSnippetApi_UpdateSnippetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnippetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).UpdateSnippetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/UpdateSnippetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).UpdateSnippetV1(ctx, req.(*UpdateSnippetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSnippetApi_RemoveSnippetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSnippetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSnippetApiServer).RemoveSnippetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.snippet.api.OcpSnippetApi/RemoveSnippetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSnippetApiServer).RemoveSnippetV1(ctx, req.(*RemoveSnippetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpSnippetApi_ServiceDesc is the grpc.ServiceDesc for OcpSnippetApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpSnippetApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.snippet.api.OcpSnippetApi",
	HandlerType: (*OcpSnippetApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnippetV1",
			Handler:    _OcpSnippetApi_CreateSnippetV1_Handler,
		},
		{
			MethodName: "MultiCreateSnippetV1",
			Handler:    _OcpSnippetApi_MultiCreateSnippetV1_Handler,
		},
		{
			MethodName: "DescribeSnippetV1",
			Handler:    _OcpSnippetApi_DescribeSnippetV1_Handler,
		},
		{
			MethodName: "ListSnippetsV1",
			Handler:    _OcpSnippetApi_ListSnippetsV1_Handler,
		},
		{
			MethodName: "UpdateSnippetV1",
			Handler:    _OcpSnippetApi_UpdateSnippetV1_Handler,
		},
		{
			MethodName: "RemoveSnippetV1",
			Handler:    _OcpSnippetApi_RemoveSnippetV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-snippet-api/ocp-snippet-api.proto",
}
