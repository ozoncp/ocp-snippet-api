// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-snippet-api/ocp-snippet-api.proto

package ocp_snippet_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateSnippetV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSnippetV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SolutionId

	// no validation rules for UserId

	// no validation rules for Text

	// no validation rules for Language

	return nil
}

// CreateSnippetV1RequestValidationError is the validation error returned by
// CreateSnippetV1Request.Validate if the designated constraints aren't met.
type CreateSnippetV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSnippetV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSnippetV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSnippetV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSnippetV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSnippetV1RequestValidationError) ErrorName() string {
	return "CreateSnippetV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSnippetV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSnippetV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSnippetV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSnippetV1RequestValidationError{}

// Validate checks the field values on CreateSnippetV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSnippetV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateSnippetV1ResponseValidationError is the validation error returned by
// CreateSnippetV1Response.Validate if the designated constraints aren't met.
type CreateSnippetV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSnippetV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSnippetV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSnippetV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSnippetV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSnippetV1ResponseValidationError) ErrorName() string {
	return "CreateSnippetV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSnippetV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSnippetV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSnippetV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSnippetV1ResponseValidationError{}

// Validate checks the field values on DescribeSnippetV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeSnippetV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnippetId

	return nil
}

// DescribeSnippetV1RequestValidationError is the validation error returned by
// DescribeSnippetV1Request.Validate if the designated constraints aren't met.
type DescribeSnippetV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSnippetV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSnippetV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSnippetV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSnippetV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSnippetV1RequestValidationError) ErrorName() string {
	return "DescribeSnippetV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSnippetV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSnippetV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSnippetV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSnippetV1RequestValidationError{}

// Validate checks the field values on DescribeSnippetV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeSnippetV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSnippet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeSnippetV1ResponseValidationError{
				field:  "Snippet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeSnippetV1ResponseValidationError is the validation error returned by
// DescribeSnippetV1Response.Validate if the designated constraints aren't met.
type DescribeSnippetV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSnippetV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSnippetV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSnippetV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSnippetV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSnippetV1ResponseValidationError) ErrorName() string {
	return "DescribeSnippetV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSnippetV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSnippetV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSnippetV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSnippetV1ResponseValidationError{}

// Validate checks the field values on ListSnippetsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSnippetsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListSnippetsV1RequestValidationError is the validation error returned by
// ListSnippetsV1Request.Validate if the designated constraints aren't met.
type ListSnippetsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSnippetsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSnippetsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSnippetsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSnippetsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSnippetsV1RequestValidationError) ErrorName() string {
	return "ListSnippetsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSnippetsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSnippetsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSnippetsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSnippetsV1RequestValidationError{}

// Validate checks the field values on ListSnippetsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSnippetsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSnippets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSnippetsV1ResponseValidationError{
					field:  fmt.Sprintf("Snippets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSnippetsV1ResponseValidationError is the validation error returned by
// ListSnippetsV1Response.Validate if the designated constraints aren't met.
type ListSnippetsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSnippetsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSnippetsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSnippetsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSnippetsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSnippetsV1ResponseValidationError) ErrorName() string {
	return "ListSnippetsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSnippetsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSnippetsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSnippetsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSnippetsV1ResponseValidationError{}

// Validate checks the field values on RemoveSnippetV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSnippetV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnippetId

	return nil
}

// RemoveSnippetV1RequestValidationError is the validation error returned by
// RemoveSnippetV1Request.Validate if the designated constraints aren't met.
type RemoveSnippetV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSnippetV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSnippetV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSnippetV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSnippetV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSnippetV1RequestValidationError) ErrorName() string {
	return "RemoveSnippetV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSnippetV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSnippetV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSnippetV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSnippetV1RequestValidationError{}

// Validate checks the field values on RemoveSnippetV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSnippetV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Removed

	return nil
}

// RemoveSnippetV1ResponseValidationError is the validation error returned by
// RemoveSnippetV1Response.Validate if the designated constraints aren't met.
type RemoveSnippetV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSnippetV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSnippetV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSnippetV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSnippetV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSnippetV1ResponseValidationError) ErrorName() string {
	return "RemoveSnippetV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSnippetV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSnippetV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSnippetV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSnippetV1ResponseValidationError{}

// Validate checks the field values on Snippet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Snippet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SolutionId

	// no validation rules for UserId

	// no validation rules for Text

	// no validation rules for Language

	return nil
}

// SnippetValidationError is the validation error returned by Snippet.Validate
// if the designated constraints aren't met.
type SnippetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnippetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnippetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnippetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnippetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnippetValidationError) ErrorName() string { return "SnippetValidationError" }

// Error satisfies the builtin error interface
func (e SnippetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnippet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnippetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnippetValidationError{}
